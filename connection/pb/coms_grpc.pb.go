// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package pb

import (
	context "context"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// ComsClient is the client API for Coms service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ComsClient interface {
	AddMessage(ctx context.Context, in *Message, opts ...grpc.CallOption) (*empty.Empty, error)
}

type comsClient struct {
	cc grpc.ClientConnInterface
}

func NewComsClient(cc grpc.ClientConnInterface) ComsClient {
	return &comsClient{cc}
}

var comsAddMessageStreamDesc = &grpc.StreamDesc{
	StreamName: "addMessage",
}

func (c *comsClient) AddMessage(ctx context.Context, in *Message, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/battle_city_ds.Coms/addMessage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ComsService is the service API for Coms service.
// Fields should be assigned to their respective handler implementations only before
// RegisterComsService is called.  Any unassigned fields will result in the
// handler for that method returning an Unimplemented error.
type ComsService struct {
	AddMessage func(context.Context, *Message) (*empty.Empty, error)
}

func (s *ComsService) addMessage(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Message)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return s.AddMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     s,
		FullMethod: "/battle_city_ds.Coms/AddMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.AddMessage(ctx, req.(*Message))
	}
	return interceptor(ctx, in, info, handler)
}

// RegisterComsService registers a service implementation with a gRPC server.
func RegisterComsService(s grpc.ServiceRegistrar, srv *ComsService) {
	srvCopy := *srv
	if srvCopy.AddMessage == nil {
		srvCopy.AddMessage = func(context.Context, *Message) (*empty.Empty, error) {
			return nil, status.Errorf(codes.Unimplemented, "method AddMessage not implemented")
		}
	}
	sd := grpc.ServiceDesc{
		ServiceName: "battle_city_ds.Coms",
		Methods: []grpc.MethodDesc{
			{
				MethodName: "addMessage",
				Handler:    srvCopy.addMessage,
			},
		},
		Streams:  []grpc.StreamDesc{},
		Metadata: "connection/pb/coms.proto",
	}

	s.RegisterService(&sd, nil)
}
